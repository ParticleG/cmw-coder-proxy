name: Comware Coder Proxy Main CI

permissions: write-all

on:
  push:
    branches: [ ci-*, main ]
    tags: [ pre*, v* ]
  pull_request:
    branches: [ main ]

jobs:
  get-info:
    runs-on: ubuntu-latest
    outputs:
      commitHash: ${{ steps.git-info.outputs.commitHash }}
    steps:
      - uses: actions/checkout@v4
      - name: Get git info
        id: git-info
        shell: bash
        run: |
          COMMIT_HASH=$(git rev-parse --short ${{ GITHUB.SHA }})
          echo "commitHash=$COMMIT_HASH" >> $GITHUB_OUTPUT

  build:
    runs-on: windows-latest
    needs: get-info
    env:
      OUTPUT_FOLDER: ./build
      RELEASE_FOLDER: ./release
      VCPKG_DEFAULT_TRIPLET: x86-windows
    strategy:
      matrix:
        config: [ debug, release ]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
#      - name: Setup vcpkg
#        uses: lukka/run-vcpkg@v11
#      - name: CMake Configure and Build
#        uses: lukka/run-cmake@v10
#        with:
#          workflowPreset: ${{ matrix.config }}
      - name: CMake Configure and Build
        run: |
          ls "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/MSVC/"
          cmake.exe -DCMAKE_BUILD_TYPE=Release -DCMAKE_MAKE_PROGRAM="${{ env.DevEnvDir }}/CommonExtensions/Microsoft/CMake/Ninja/ninja.exe" -DCMAKE_VS_PLATFORM_TOOLSET_VERSION="14.29.30133" -DVCPKG_DEFAULT_TRIPLET=${{ env.VCPKG_DEFAULT_TRIPLET }} -G Ninja -S "${{ github.workspace }}" -B "${{ github.workspace }}/${{ env.RELEASE_FOLDER }}"
          cmake.exe --build "${{ github.workspace }}/${{ env.RELEASE_FOLDER }}" --target msimg32
#      - name: CMake Configure and Build
#        run: |
#          ls "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/MSVC/"
#          echo "DevEnvDir: ${{ env.DevEnvDir }}"
#          cmake --workflow --preset ${{ matrix.config }}
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cmw-coder-proxy_${{ needs.get-info.outputs.commitHash }}_${{ GITHUB.RUN_NUMBER }}_${{ matrix.config }}
          path: "${{ env.OUTPUT_FOLDER }}/${{ matrix.config }}"
      - name: Prepare for release
        if: ${{ (startsWith(github.ref, 'refs/tags/pre') || startsWith(github.ref, 'refs/tags/v')) && matrix.config == 'release'}}
        shell: bash
        run: |
          mkdir -p ${{ env.RELEASE_FOLDER }}
          cp ${{ env.OUTPUT_FOLDER }}/${{ matrix.config }}/msimg32.dll ${{ env.RELEASE_FOLDER }}/loaderdll.dll
          cp ${{ env.OUTPUT_FOLDER }}/${{ matrix.config }}/zlib1.dll ${{ env.RELEASE_FOLDER }}/zlib1.dll
      - name: Upload release
        if: ${{ (startsWith(github.ref, 'refs/tags/pre') || startsWith(github.ref, 'refs/tags/v')) && matrix.config == 'release'}}
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: |
            ${{ env.RELEASE_FOLDER }}/loaderdll.dll
            ${{ env.RELEASE_FOLDER }}/zlib1.dll
          prerelease: ${{ startsWith(github.ref, 'refs/tags/pre') }}
